for(i in 1:length(areas$Total))
{ areas[i,5] = 100*area[i,2]/area[i,1]
areas[i,6] = 100*area[i,3]/area[i,1]
areas[i,7] = 100*area[i,4]/area[i,1]
}
areas = areas[1:4,]
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/area[i,1]
areas[i,6] = 100*areas[i,3]/area[i,1]
areas[i,7] = 100*areas[i,4]/area[i,1]
}
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas[,c(5,6,7)] = round(areas[,c(5,6,7)],2)
areas = data.frame(matrix(nrow=4, ncol=7))
nomesareas = c("Exatas", "Biológicas", "Humanas", "Profis")
for(i in 1:length(minhatab$Código))
{ areas[i,1] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Total)
areas[i,2] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Sim)
areas[i,3] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Não)
areas[i,4] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Abstenção)
}
areas = areas[1:4,]
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas[,c(5,6,7)] = round(areas[,c(5,6,7)],2)
areas[,5] =
rownames(areas) = nomesareas
colnames(areas) = c("Total", "Sim", "Não", "Abstenção", "PSim", "PNão", "PAbstenção")
p <- plot_ly( x =nomesareas , y =areas[1:3,2], name = "Sim", type = "bar")
p2 <- add_trace (p, x =nomesareas , y =areas[1:3,3], name = "Não", type = "bar" )
p3 <- add_trace(p2, x =nomesareas , y =areas[1:3,4], name = "Abstenção", type = "bar" )
p3
areas = data.frame(matrix(nrow=4, ncol=7))
nomesareas = c("Exatas", "Biológicas", "Humanas", "Profis")
for(i in 1:length(minhatab$Código))
{ areas[i,1] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Total)
areas[i,2] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Sim)
areas[i,3] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Não)
areas[i,4] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Abstenção)
}
areas = areas[1:4,]
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas[,c(5,6,7)] = round(areas[,c(5,6,7)],2)
areas[,5] =
rownames(areas) = nomesareas
colnames(areas) = c("Total", "Sim", "Não", "Abstenção", "PSim", "PNão", "PAbstenção")
p <- plot_ly( x =nomesareas , y =areas[1:3,5], name = "Sim", type = "bar")
p2 <- add_trace (p, x =nomesareas , y =areas[1:3,6], name = "Não", type = "bar" )
p3 <- add_trace(p2, x =nomesareas , y =areas[1:3,7], name = "Abstenção", type = "bar" )
p3
```
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas[,c(5,6,7)] = round(areas[,c(5,6,7)],2)
areas[,c(5,6,7)] = as.numeric(areas[, c(5,6,7)])
areas[,5] = as.numeric(areas[,5])
areas[,5] = as.numeric(areas[,5])
areas[,6] = as.numeric(areas[,6])
areas[,7] = as.numeric(areas[,7])
areas[,c(5,6,7)] = round(areas[,c(5,6,7)],2)
areas[,5] =
rownames(areas) = nomesareas
colnames(areas) = c("Total", "Sim", "Não", "Abstenção", "PSim", "PNão", "PAbstenção")
p <- plot_ly( x =nomesareas , y =areas[1:3,5], name = "Sim", type = "bar")
p2 <- add_trace (p, x =nomesareas , y =areas[1:3,6], name = "Não", type = "bar" )
p3 <- add_trace(p2, x =nomesareas , y =areas[1:3,7], name = "Abstenção", type = "bar" )
p3
areas[i,5] = 100*areas[i,2]/areas[i,1]
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas[,5] = as.numeric(areas[,5])
areas[,6] = as.numeric(areas[,6])
areas[,7] = as.numeric(areas[,7])
areas[,c(5,6,7)] = round(areas[,c(5,6,7)],2)
rownames(areas) = nomesareas
colnames(areas) = c("Total", "Sim", "Não", "Abstenção", "PSim", "PNão", "PAbstenção")
p <- plot_ly( x =nomesareas , y =areas[1:3,5], name = "Sim", type = "bar")
p2 <- add_trace (p, x =nomesareas , y =areas[1:3,6], name = "Não", type = "bar" )
p3 <- add_trace(p2, x =nomesareas , y =areas[1:3,7], name = "Abstenção", type = "bar" )
p3
##setup
if (Sys.info()['sysname'] == 'Darwin') Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
library(ggplot2)
library(lattice)
#library(mapview)
library(sp)
library(stringr)
library(rvest)
library(googleVis)
library(leaflet)
library(plotly)
library(DT)
page = read_html('http://votaunicamp.herokuapp.com/prev_results/', encoding='UTF-8')
tbl = html_table(page)[[2]]
#head(tbl)
##formatação dos dados
colnames(tbl)= c("Cursos", "Total", "Sim","Abstenções", "Não")
mytbl = data.frame(codigo=as.integer(str_extract(tbl$Curso, "^\\d+")),
nivel=NA,
curso=gsub("^(\\d+) - (.*)$", "\\2", tbl$Curso),
total=tbl$Total,
sim=as.integer(str_extract(tbl$Sim, "^\\d+")),
nao=as.integer(str_extract(tbl$Não, "^\\d+")),
abstencao=as.integer(str_extract(tbl$Abstenções, "^\\d+")))
nivel = str_extract(mytbl$curso, "(Dou|Mes)[a-z]+")
nivel[grepl("Mes", nivel)] = "Mestrado"
nivel[grepl("Dou", nivel)] = "Doutorado"
nivel[is.na(nivel)] = "Graduacao"
mytbl$nivel = nivel
rm(nivel)
mytbl$curso = gsub("(Mes|Dou).+ em (.*)$", "\\2", mytbl$curso)
head(mytbl)
## Separando os dados por institutos
load("instituto_por_nome.rda")
colnames(instituto.por.numero) = c("Instituto", "Área", "Código", "NoMatriculados")
minhatab = subset(mytbl, nivel == "Graduacao")
minhatab = cbind(minhatab, c = rep(0, dim(minhatab)[1]), c = rep(0, dim(minhatab)[1]) )
for(i in 1:length(minhatab$codigo)) {
for(j in 1:length(instituto.por.numero$Instituto) ){
if(minhatab[i,1]==instituto.por.numero[j,3]){
minhatab[i,8] = levels(instituto.por.numero[j,2])[instituto.por.numero[j,2]]
minhatab[i,9] = levels(instituto.por.numero[j,1])[instituto.por.numero[j,1]]
}
}
}
colnames(minhatab) = c("Código","Nível","Curso","Total","Sim","Não","Abstenção","Área","Instituto")
nomesinstitutos = c("IMECC", "FEM", "FEF", "IA", "IEL", "IFCH", "IFGW", "IQ", "IB", "FEEC", "FEQ", "FE", "IE", "IC", "FEC", "FEAGRI", "FCM", "IG", "FEA", "PROFIS", "FENF", "FCF", "FCA", "FT", "FOP")
todosinstitutos = data.frame(matrix(nrow=25, ncol=4))
for(i in 1:length(minhatab$Código))
{ todosinstitutos[i,1] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Total)
todosinstitutos[i,2] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Sim)
todosinstitutos[i,3] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Não)
todosinstitutos[i,4] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Abstenção)
}
todosinstitutos = todosinstitutos[1:25,]
todosinstitutos = cbind(todosinstitutos, nomesinstitutos)
colnames(todosinstitutos) = c("Total", "Sim", "Não", "Abstenção", "Instituto")
rownames(todosinstitutos) = nomesinstitutos
#na tabela todosinstitutos, últimos - limeira(FCA, FT) e piracicaba(FOP)
prop =  data.frame(matrix(nrow = length(todosinstitutos$Total), ncol = 3))
for(i in 1:dim(todosinstitutos)[1])
{ prop[i,] = c(100*todosinstitutos[i,2]/todosinstitutos[i,1], 100*todosinstitutos[i,3]/todosinstitutos[i,1], 100*todosinstitutos[i,4]/todosinstitutos[i,1])
}
rownames(prop) = c("IMECC", "FEM", "FEF", "IA", "IEL", "IFCH", "IFGW", "IQ", "IB", "FEEC", "FEQ", "FE", "IE", "IC", "FEC", "FEAGRI", "FCM", "IG", "FEA", "PROFIS", "FENF", "FCF","FCA", "FT","FOP")
colnames(prop) = c("SIM", "NÂO", "ABSTENÇÂO")
prop[,1] = as.numeric(prop[,1])
prop[,2] = as.numeric(prop[,2])
prop[,3] = as.numeric(prop[,3])
prop = round(prop,2)
## Arrumar quando for 0
##proptotal = prop[-21,-3]
##library(d3heatmap)
##library(RColorBrewer)
##d3heatmap(porptotal, col=rev(brewer.pal(9, "BuGn")))
#acrescentando alguns institutos
ends = read.table('institutos.tab', sep='\t', header=TRUE)
localizacao_faltantes = data.frame(matrix(nrow = 3, ncol = 3))
localizacao_faltantes[1,] = c("PROFIS", -22.8174, -47.06847)
localizacao_faltantes[2,] = c("FENF", -22.83080 , -47.06133)
localizacao_faltantes[3,] = c("FCF", -22.81770, -47.07084)
localizacao_faltantes[,2] = as.numeric(localizacao_faltantes[,2])
localizacao_faltantes[,3] = as.numeric(localizacao_faltantes[,3])
colnames(localizacao_faltantes) = c("instituto","lat","lon")
ends = rbind(ends,localizacao_faltantes)
#função para gerar o gráfico que serão add no mapa
fldr <- tempfile()
dir.create(fldr)
pop <- lapply(seq(length(todosinstitutos[1:22,1])), function(i) {
if(todosinstitutos$Total[i]==0){return("Sem Votos")}
dados <- data.frame(Tipo=c("Sim","Não","Abstenções"),Total=c(0,0,0))
dados[1,2]<-todosinstitutos[i,2]
dados[2,2]<-todosinstitutos[i,3]
dados[3,2]<-todosinstitutos[i,4]
p = ggplot(data = dados, aes(x=Tipo,y=Total, fill=Tipo))+ geom_bar(stat="identity")+
ggtitle(rownames((todosinstitutos[i,])))+xlab("")+ theme(legend.position="none")+
scale_x_discrete(limits=c("Sim", "Não", "Abstenções"))+
geom_text(aes(label=Total), vjust=0.2,
position = position_dodge(0.9), size=3.5)
svg(filename = paste(fldr, "test.svg", sep = "/"),
width = 250 * 0.01334, height = 250 * 0.01334)
print(p)
dev.off()
tst <- paste(readLines(paste(fldr, "test.svg", sep = "/")), collapse = "")
return(tst)
})
##gerando o mapa
pal= colorQuantile("BuGn",prop[1:22,2],n=5)
map = leaflet()
map = addTiles(map)
map = addCircleMarkers(map, lat=ends$lat, lng=ends$lon, popup = pop, color = pal(prop[1:22,2]), opacity = 1)
map
#criando a localização de limeira
endlim = data.frame(matrix(nrow = 2, ncol = 3))
endlim[1,] = c("FCA", -22.55385, -47.42841)
endlim[2,] = c( "FT", -22.56201, -47.42397)
colnames(endlim) = c("instituto", "lat", "lon")
endlim[,2] = as.numeric(endlim[,2])
endlim[,3] = as.numeric(endlim[,3])
#institutoslim = data.frame(matrix(nrow = 2, ncol = 5))
institutoslim = todosinstitutos[c(23,24),]
##função para gerar os gráficos que serão add no mapa
fldr <- tempfile()
dir.create(fldr)
pop <- lapply(seq(length(institutoslim$Total)), function(i) {
if(institutoslim$Total[i]==0){return("Sem Votos")}
dados <- data.frame(Tipo=c("Sim","Não","Abstenções"),Total=c(0,0,0))
dados[1,2]<-institutoslim[i,2]
dados[2,2]<-institutoslim[i,3]
dados[3,2]<-institutoslim[i,4]
p = ggplot(data = dados, aes(x=Tipo,y=Total, fill=Tipo))+ geom_bar(stat="identity")+
ggtitle(rownames((institutoslim[i,])))+xlab("")+ theme(legend.position="none")+
scale_x_discrete(limits=c("Sim", "Não", "Abstenções"))+
geom_text(aes(label=Total), vjust=0.2,
position = position_dodge(0.9), size=3.5)
svg(filename = paste(fldr, "test.svg", sep = "/"),
width = 250 * 0.01334, height = 250 * 0.01334)
print(p)
dev.off()
tst <- paste(readLines(paste(fldr, "test.svg", sep = "/")), collapse = "")
return(tst)
})
##gerando o mapa
map = leaflet()
map = addTiles(map)
map = addCircleMarkers(map, lat=endlim$lat, lng=endlim$lon, popup = pop)
map
endpira = data.frame(matrix(nrow = 1, ncol = 3))
endpira[1,] = c("FOP", -22.70154, -47.64767)
colnames(endpira) = c("instituto", "lat", "lon")
endpira[,2] = as.numeric(endpira[,2])
endpira[,3] = as.numeric(endpira[,3])
institutospira = todosinstitutos[25,]
# função para gerar os gráficos que serão add no mapa
fldr <- tempfile()
dir.create(fldr)
pop <- lapply(seq(length(institutospira$Total)), function(i) {
if(todosinstitutos$Total[i]==0){return("Sem Votos")}
dados <- data.frame(Tipo=c("Sim","Não","Abstenções"),Total=c(0,0,0))
dados[1,2]<-institutospira[i,2]
dados[2,2]<-institutospira[i,3]
dados[3,2]<-institutospira[i,4]
p = ggplot(data = dados, aes(x=Tipo,y=Total, fill=Tipo))+ geom_bar(stat="identity")+
ggtitle(rownames((institutospira[i,])))+xlab("")+ theme(legend.position="none")+
scale_x_discrete(limits=c("Sim", "Não", "Abstenções"))+
geom_text(aes(label=Total), vjust=0.2,
position = position_dodge(0.9), size=3.5)
svg(filename = paste(fldr, "test.svg", sep = "/"),
width = 250 * 0.01334, height = 250 * 0.01334)
print(p)
dev.off()
tst <- paste(readLines(paste(fldr, "test.svg", sep = "/")), collapse = "")
return(tst)
})
## gerando o mapa
map = leaflet()
map = addTiles(map)
map = addCircleMarkers(map, lat=endpira$lat, lng=endpira$lon, popup = pop)
map
tabelafinal = minhatab[,c(8,9,3,4,5,6,7)]
tabelafinal = tabelafinal[,c(-8)]
colnames(tabelafinal) = c("Área","Instituto","Curso","Total","Sim","Não", "Abstenção")
datatable(tabelafinal, options = list(pageLength = 5))
areas = data.frame(matrix(nrow=4, ncol=7))
nomesareas = c("Exatas", "Biológicas", "Humanas", "Profis")
for(i in 1:length(minhatab$Código))
{ areas[i,1] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Total)
areas[i,2] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Sim)
areas[i,3] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Não)
areas[i,4] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Abstenção)
}
areas = areas[1:4,]
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas[,5] = as.numeric(areas[,5])
areas[,6] = as.numeric(areas[,6])
areas[,7] = as.numeric(areas[,7])
areas[,c(5,6,7)] = round(areas[,c(5,6,7)],2)
rownames(areas) = nomesareas
colnames(areas) = c("Total", "Sim", "Não", "Abstenção", "PSim", "PNão", "PAbstenção")
p <- plot_ly( x =nomesareas , y =areas[1:3,5], name = "Sim", type = "bar")
p2 <- add_trace (p, x =nomesareas , y =areas[1:3,6], name = "Não", type = "bar" )
p3 <- add_trace(p2, x =nomesareas , y =areas[1:3,7], name = "Abstenção", type = "bar" )
p3
areas = data.frame(matrix(nrow=4, ncol=7))
nomesareas = c("Exatas", "Biológicas", "Humanas", "Profis")
for(i in 1:length(minhatab$Código))
{ areas[i,1] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Total)
areas[i,2] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Sim)
areas[i,3] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Não)
areas[i,4] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Abstenção)
}
areas = areas[1:4,]
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas[,5] = as.numeric(areas[,5])
areas[,6] = as.numeric(areas[,6])
areas[,7] = as.numeric(areas[,7])
areas[,c(5,6,7)] = round(areas[,c(5,6,7)],2)
rownames(areas) = nomesareas
colnames(areas) = c("Total", "Sim", "Não", "Abstenção", "PSim", "PNão", "PAbstenção")
View(areas)
length(areas$Total)
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas = data.frame(matrix(nrow=4, ncol=7))
nomesareas = c("Exatas", "Biológicas", "Humanas", "Profis")
for(i in 1:length(minhatab$Código))
{ areas[i,1] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Total)
areas[i,2] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Sim)
areas[i,3] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Não)
areas[i,4] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Abstenção)
}
areas = areas[1:4,]
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas[,5] = as.numeric(areas[,5])
areas[,6] = as.numeric(areas[,6])
areas[,7] = as.numeric(areas[,7])
areas[,c(5,6,7)] = round(areas[,c(5,6,7)],2)
rownames(areas) = nomesareas
colnames(areas) = c("Total", "Sim", "Não", "Abstenção", "PSim", "PNão", "PAbstenção")
p <- plot_ly( x =nomesareas , y =areas[1:3,5], name = "Sim", type = "bar")
p2 <- add_trace (p, x =nomesareas , y =areas[1:3,6], name = "Não", type = "bar" )
p3 <- add_trace(p2, x =nomesareas , y =areas[1:3,7], name = "Abstenção", type = "bar" )
p3
areas = data.frame(matrix(nrow=4, ncol=7))
nomesareas = c("Exatas", "Biológicas", "Humanas", "Profis")
for(i in 1:length(minhatab$Código))
{ areas[i,1] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Total)
areas[i,2] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Sim)
areas[i,3] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Não)
areas[i,4] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Abstenção)
}
areas = areas[1:4,]
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas = areas[1:4,]
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
100*areas[i,2]/areas[i,1]
areas[i,2]
areas[,1] = as.numeric(areas[,1])
areas[,2] = as.numeric(areas[,2])
areas[,3] = as.numeric(areas[,3])
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas[i,2]
areas = data.frame(matrix(nrow=4, ncol=7))
nomesareas = c("Exatas", "Biológicas", "Humanas", "Profis")
for(i in 1:length(minhatab$Código))
{ areas[i,1] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Total)
areas[i,2] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Sim)
areas[i,3] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Não)
areas[i,4] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Abstenção)
}
areas = areas[1:4,]
areas[,1] = as.numeric(areas[,1])
areas[,2] = as.numeric(areas[,2])
areas[,3] = as.numeric(areas[,3])
areas = data.frame(matrix(nrow=4, ncol=7))
nomesareas = c("Exatas", "Biológicas", "Humanas", "Profis")
rownames(areas) = nomesareas
colnames(areas) = c("Total", "Sim", "Não", "Abstenção", "PSim", "PNão", "PAbstenção")
for(i in 1:length(minhatab$Código))
{ areas[i,1] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Total)
areas[i,2] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Sim)
areas[i,3] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Não)
areas[i,4] = sum(minhatab[which(minhatab[,8]== nomesareas[i]),]$Abstenção)
}
areas = areas[1:4,]
areas[,1] = as.numeric(areas[,1])
areas[,2] = as.numeric(areas[,2])
areas[,3] = as.numeric(areas[,3])
for(i in 1:length(areas$Total))
{ areas[i,5] = 100*areas[i,2]/areas[i,1]
areas[i,6] = 100*areas[i,3]/areas[i,1]
areas[i,7] = 100*areas[i,4]/areas[i,1]
}
areas[,5] = as.numeric(areas[,5])
areas[,6] = as.numeric(areas[,6])
areas[,7] = as.numeric(areas[,7])
areas[,c(5,6,7)] = round(areas[,c(5,6,7)],2)
p <- plot_ly( x =nomesareas , y =areas[1:3,5], name = "Sim", type = "bar")
p2 <- add_trace (p, x =nomesareas , y =areas[1:3,6], name = "Não", type = "bar" )
p3 <- add_trace(p2, x =nomesareas , y =areas[1:3,7], name = "Abstenção", type = "bar" )
p3
## Separando os dados por institutos
load("instituto_por_nome.rda")
colnames(instituto.por.numero) = c("Instituto", "Área", "Código", "NoMatriculados")
minhatab = subset(mytbl, nivel == "Graduacao")
minhatab = cbind(minhatab, c = rep(0, dim(minhatab)[1]), c = rep(0, dim(minhatab)[1]) )
for(i in 1:length(minhatab$codigo)) {
for(j in 1:length(instituto.por.numero$Instituto) ){
if(minhatab[i,1]==instituto.por.numero[j,3]){
minhatab[i,8] = levels(instituto.por.numero[j,2])[instituto.por.numero[j,2]]
minhatab[i,9] = levels(instituto.por.numero[j,1])[instituto.por.numero[j,1]]
}
}
}
colnames(minhatab) = c("Código","Nível","Curso","Total","Sim","Não","Abstenção","Área","Instituto")
nomesinstitutos = c("IMECC", "FEM", "FEF", "IA", "IEL", "IFCH", "IFGW", "IQ", "IB", "FEEC", "FEQ", "FE", "IE", "IC", "FEC", "FEAGRI", "FCM", "IG", "FEA", "PROFIS", "FENF", "FCF", "FCA", "FT", "FOP")
todosinstitutos = data.frame(matrix(nrow=25, ncol=4))
for(i in 1:length(minhatab$Código))
{ todosinstitutos[i,1] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Total)
todosinstitutos[i,2] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Sim)
todosinstitutos[i,3] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Não)
todosinstitutos[i,4] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Abstenção)
}
todosinstitutos = todosinstitutos[1:25,]
todosinstitutos = cbind(todosinstitutos, nomesinstitutos)
colnames(todosinstitutos) = c("Total", "Sim", "Não", "Abstenção", "Instituto")
rownames(todosinstitutos) = nomesinstitutos
##setup
if (Sys.info()['sysname'] == 'Darwin') Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
library(ggplot2)
library(lattice)
#library(mapview)
library(sp)
library(stringr)
library(rvest)
library(googleVis)
library(leaflet)
library(plotly)
library(DT)
page = read_html('http://votaunicamp.herokuapp.com/prev_results/', encoding='UTF-8')
tbl = html_table(page)[[2]]
#head(tbl)
##formatação dos dados
colnames(tbl)= c("Cursos", "Total", "Sim","Abstenções", "Não")
mytbl = data.frame(codigo=as.integer(str_extract(tbl$Curso, "^\\d+")),
nivel=NA,
curso=gsub("^(\\d+) - (.*)$", "\\2", tbl$Curso),
total=tbl$Total,
sim=as.integer(str_extract(tbl$Sim, "^\\d+")),
nao=as.integer(str_extract(tbl$Não, "^\\d+")),
abstencao=as.integer(str_extract(tbl$Abstenções, "^\\d+")))
nivel = str_extract(mytbl$curso, "(Dou|Mes)[a-z]+")
nivel[grepl("Mes", nivel)] = "Mestrado"
nivel[grepl("Dou", nivel)] = "Doutorado"
nivel[is.na(nivel)] = "Graduacao"
mytbl$nivel = nivel
rm(nivel)
mytbl$curso = gsub("(Mes|Dou).+ em (.*)$", "\\2", mytbl$curso)
head(mytbl)
## Separando os dados por institutos
load("instituto_por_nome.rda")
colnames(instituto.por.numero) = c("Instituto", "Área", "Código", "NoMatriculados")
minhatab = subset(mytbl, nivel == "Graduacao")
minhatab = cbind(minhatab, c = rep(0, dim(minhatab)[1]), c = rep(0, dim(minhatab)[1]) )
for(i in 1:length(minhatab$codigo)) {
for(j in 1:length(instituto.por.numero$Instituto) ){
if(minhatab[i,1]==instituto.por.numero[j,3]){
minhatab[i,8] = levels(instituto.por.numero[j,2])[instituto.por.numero[j,2]]
minhatab[i,9] = levels(instituto.por.numero[j,1])[instituto.por.numero[j,1]]
}
}
}
colnames(minhatab) = c("Código","Nível","Curso","Total","Sim","Não","Abstenção","Área","Instituto")
nomesinstitutos = c("IMECC", "FEM", "FEF", "IA", "IEL", "IFCH", "IFGW", "IQ", "IB", "FEEC", "FEQ", "FE", "IE", "IC", "FEC", "FEAGRI", "FCM", "IG", "FEA", "PROFIS", "FENF", "FCF", "FCA", "FT", "FOP")
todosinstitutos = data.frame(matrix(nrow=25, ncol=4))
for(i in 1:length(minhatab$Código))
{ todosinstitutos[i,1] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Total)
todosinstitutos[i,2] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Sim)
todosinstitutos[i,3] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Não)
todosinstitutos[i,4] = sum(minhatab[which(minhatab[,9]== nomesinstitutos[i]),]$Abstenção)
}
todosinstitutos = todosinstitutos[1:25,]
todosinstitutos = cbind(todosinstitutos, nomesinstitutos)
colnames(todosinstitutos) = c("Total", "Sim", "Não", "Abstenção", "Instituto")
rownames(todosinstitutos) = nomesinstitutos
